// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
        hue: { value: 1}
        saturation: { value: 1 }
        lightness: { value: 1 }
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common/common-define>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>

  in vec4 color;

  uniform hsl {
    float hue; // [-180, 180]
    float saturation; // [0, 2]
    float lightness; // [0, 2]
  };

  #if USE_TEXTURE
    in vec2 uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 11) uniform sampler2D cc_spriteTexture;
  #endif

  vec3 RGBConvertToHSL(vec3 rgb) {
    float R = rgb.x, G = rgb.y, B = rgb.z;
    float maxValue = max(R,max(G,B));
    float minValue = min(R,min(G,B));
    float range = maxValue - minValue;
    float lightness = (maxValue + minValue) / 2.0;

    vec3 hsl;

    // hue
    if (R == maxValue) {
      hsl.x = 0.0 + (G-B)/(maxValue-minValue);
    }
    if (G == maxValue) {
      hsl.x = 2.0 + (B-R)/(maxValue-minValue);
    }
    if (B == maxValue) {
      hsl.x = 4.0 + (R-G)/(maxValue-minValue);
    }
    hsl.x = hsl.x * 60.0;
    if (hsl.x < 0.0) hsl.x = hsl.x + 360.0;

    // saturation
    if (lightness == 0.0 || lightness == 1.0) {
      hsl.y = 0.0;
    } else {
      hsl.y = (maxValue - lightness) / min(lightness, (1.0 - lightness));
    }

    // lightness
    hsl.z = lightness;

    return hsl;
  }

  float funcK(float n, float hue) {
    return mod((n + hue / 30.0), 12.0);
  }

  float funcF(float n, vec3 hsl) {
    float a = hsl.y * min(hsl.z, 1.0 - hsl.z);
    float v = min(funcK(n, hsl.x) - 3.0, min(9.0 - funcK(n, hsl.x), 1.0));
    return hsl.z - a * max(-1.0, v);
  }

  vec3 HSLConvertToRGB(vec3 hsl) {
    return vec3(funcF(0.0, hsl), funcF(8.0, hsl), funcF(4.0, hsl));
  }

  float clamp01(float value) {
    if (value > 1.0) {
      return 1.0;
    }
    if (value < 0.0) {
      return 0.0;
    }
    return value;
  }

  vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);
      #if IS_GRAY
        float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;
        o.r = o.g = o.b = gray;
      #endif
    #endif

    // adjust hsl
    vec3 colorHSL = RGBConvertToHSL(o.rgb);
    colorHSL.r = mod(colorHSL.x + hue + 360.0, 360.0); // [0, 360)
    colorHSL.g = min(colorHSL.y * saturation, 1.0); // [0, 1]
    colorHSL.b = min(colorHSL.z * lightness, 1.0); // [0, 1]
    o = vec4(HSLConvertToRGB(colorHSL.rgb), o.a);

    o.a = clamp01(o.a);
    o.r = clamp01(o.r);
    o.g = clamp01(o.g);
    o.b = clamp01(o.b);

    o *= color;

    ALPHA_TEST(o);

    return o;
  }
}%
